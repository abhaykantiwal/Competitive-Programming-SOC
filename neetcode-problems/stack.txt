Problem - Valid Parenthesis
problem link - https://neetcode.io/problems/validate-parentheses
class Solution {
public:
    bool isValid(string s) {
        int n = s.length();
        stack<char>st;
        for(int i=0;i<n;i++){
            if(s[i]=='('||s[i]=='{'||s[i]=='['){
                st.push(s[i]);
                continue;
            } 
            else if(s[i]==')'){
                if(st.empty()|| st.top()!='('){
                    return false;
                }
            }
            else if(s[i]=='}'){
                if(st.empty()|| st.top()!='{'){
                    return false;
                }
            } 
            else if(s[i]==']'){
                if(st.empty()|| st.top()!='['){
                    return false;
                }
            }
            st.pop();
        }
        if(st.empty()){
            return true;
        }
        return false;
    
    } 
};


Problem - Min stack
problem link - https://neetcode.io/problems/minimum-stack
class MinStack {
private:
    stack<int>stck;
    stack<int>minStack;
public:
    MinStack() {}
    
    void push(int val) {
        stck.push(val);
        if(minStack.size()==0){
            minStack.push(val);
        }
        else{
            int temp = min(val, minStack.top());
            minStack.push(temp);
        }
    }
    
    void pop() {
        stck.pop();
        minStack.pop();
    }
    
    int top() {
        return stck.top();
    }
    
    int getMin() {
        return minStack.top();
    }
};


Problem - reverse polish notation
problem link - https://neetcode.io/problems/evaluate-reverse-polish-notation
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        if(tokens.size()==1){
            return stoi(tokens[0]);
        }  
        stack<int>s;
        int n = tokens.size(); 
        for(int i=0;i<n;i++){ 
            if(tokens[i]=="+"||tokens[i]=="-"||tokens[i]=="/"||tokens[i]=="*"){
                if(tokens[i]=="+"){
                    int topmost = s.top(); s.pop();
                    int secondtopmost = s.top(); s.pop();
                    s.push(topmost+secondtopmost); 
                } 
                else if(tokens[i]=="-"){
                    int topmost = s.top(); s.pop();
                    int secondtopmost = s.top(); s.pop();
                    s.push(secondtopmost- topmost);
                } 
                else if(tokens[i]=="*"){
                    int topmost = s.top(); s.pop();
                    int secondtopmost = s.top(); s.pop();
                    s.push(topmost*secondtopmost);
                }  
                else if(tokens[i]=="/"){
                    int topmost = s.top(); s.pop();
                    int secondtopmost = s.top(); s.pop();
                    s.push(secondtopmost/topmost);
                }  
            }
            else{ 
                s.push(stoi(tokens[i]));
            } 
        }
        return s.top(); 
    }
};


Problem - Daily temperatures
problem link - https://neetcode.io/problems/daily-temperatures
class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& temperatures) {
        int n = temperatures.size();
        vector<int>ans(n,0);
        stack<pair<int,int>>s;
        for(int i =0;i<n;i++){
            int curr = temperatures[i];
            while(!s.empty()&& s.top().first < curr){
                ans[s.top().second] = i - s.top().second;
                s.pop();
            } 
            s.push({curr,i});
        }
        return ans;
    }
};


Problem - Car Fleet
problem link - https://neetcode.io/problems/car-fleet
class Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        int n = position.size();
        map<int,int>dict;
        for(int i=0;i<n;i++){
            dict.insert({position[i],speed[i]});
        }
        int j = n-1;
        for(auto it = dict.begin();it!=dict.end();it++){
            position[j] = it->first;
            speed[j] = it->second;
            j--;
        }
        vector<float>diff(n);
        for(int i=0;i<n;i++){
            diff[i] = float(target-position[i])/float(speed[i]);
        }
        int count = 1;
        float temp = diff[0];
        for(int i=0;i<n-1;i++){
            if(temp<diff[i+1]){
                count++;
                temp = diff[i+1];
            } 
        }
        return count;
    }
};
