Problem - Binary Search 
problem link - https://neetcode.io/problems/binary-search
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int index = -1; 
        int start = 0; 
        int end = nums.size()-1;
        while(start<=end){
            int mid = (start+end)/2;
            if(nums[mid]==target){
                return mid; 
            } 
            else if(nums[mid]<target){
                start = mid+1;
            } 
            else{
                end = mid-1;
            }
        }
        return -1;
    }
};


Problem - Search a 2D Matrix 
problem link - https://neetcode.io/problems/search-2d-matrix
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty() || matrix[0].empty()){
            return false;
        }
        int getrow = -1;
        int left = 0; 
        int right = matrix.size()-1;
        int columns = matrix[0].size();  
        while(left<=right){ 
            int mid = (left+right)/2;
            if(target>=matrix[mid][0] && target<=matrix[mid][columns-1]){
                getrow = mid;
                break;
            } 
            else if(target<matrix[mid][0]){
                right = mid-1;
            }  
            else if(target>matrix[mid][columns-1]){
                left = mid+1;
            } 
        }
        if(getrow==-1){
            return false;
        }    
        int start = 0;
        int end = columns -1; 
        while(start<=end){ 
            int mid = (start+end)/2;
            if(matrix[getrow][mid]==target){
                return true;
            }  
            else if(matrix[getrow][mid]<target){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return false;
    }
};


Problem - Koko Eating Bananas
problem link - https://neetcode.io/problems/eating-bananas
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int left = 1;
        int right = *max_element(piles.begin(),piles.end());
        int ans = right;
        while(left<=right){
            int mid = (left+right)/2;
            int counthrs = 0;
            for(int i=0;i<piles.size();i++){
                double val = double(piles[i])/double(mid);
                int tempval = val;
                if(val==tempval){
                    counthrs+=tempval;
                }
                else{
                    counthrs+=(tempval+1);
                }
            }
            if(counthrs<=h){
                ans = mid;
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        return ans; 
    }
};
