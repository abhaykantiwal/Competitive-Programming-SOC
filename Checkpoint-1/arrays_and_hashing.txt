Problem - Contains Duplicate
problem link - https://neetcode.io/problems/duplicate-integer 
class Solution {
public:
    bool hasDuplicate(vector<int>& nums) {
        if(nums.size()==0){
            return false;
        }
        sort(nums.begin(),nums.end()); 
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]==nums[i+1]){
                return true;
            }
        }
        return false;
    }
};


Problem - Two sum 
problem link - https://neetcode.io/problems/two-integer-sum

O(n) solution
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        unordered_map<int,int> a;
        for(int i = 0;i < nums.size();i++)
        {
            if(a.find(target - nums[i]) != a.end())
            {
                return {a[target - nums[i]], i};
            }
            a[nums[i]] = i;
        }
        return {0,0};
    }
};

O(nlogn) solution
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        
        vector<pair<int,int>>a(nums.size());
        for(int i = 0;i < nums.size();i++)
        {
            a[i].first = nums[i];
            a[i].second = i;
        }
        sort(a.begin(),a.end());
        int l = 0;
        int r = nums.size() - 1;
        while(r - l > 0)
        {
            if(a[l].first + a[r].first > target) r--;
            else if(a[l].first + a[r].first < target)l++;
            else break;
        }   
        if(a[l].second > a[r].second)swap(l,r);
        return {a[l].second, a[r].second};
    }
};

O(n^2)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i=0;i<nums.size()-1;i++){
            for(int j=i;j<nums.size();j++){
                if(nums[i]+nums[j]==target){
                    return {i,j};
                }
            }
        }
    }
};


Problem - valid anagram 
problem link - https://neetcode.io/problems/is-anagram
class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        if(s.length()!=t.length()){
            return false;
        }
        else{
            for(int i=0;i<s.length();i++){
                if(s[i]!=t[i]){
                    return false;
                }
            }
            return true;
        }
    }
};


Problem - Anagram groups
problem - https://neetcode.io/problems/anagram-groups  
python solution
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        sol = []
        for i in range(len(strs)):
            if(strs[i]=="0"):
                continue
            tempi = ''.join(sorted(strs[i]))
            templist = []
            templist.append(strs[i])
            for j in range(i+1,len(strs)):
                if(len(tempi)!=len(strs[j])):
                    continue
                if(strs[j]=="0"):
                    continue
                tempj = ''.join(sorted(strs[j]))
                if(tempi==tempj):
                    templist.append(strs[j])
                    strs[j]="0"
            sol.append(templist)
        return sol 


Problem - Contains Duplicate
problem link - https://neetcode.io/problems/duplicate-integer   (Python Solution)
class Solution {
public:
    bool hasDuplicate(vector<int>& nums) {
        if(nums.size()==0){
            return false;
        }
        sort(nums.begin(),nums.end()); 
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]==nums[i+1]){
                return true;
            }
        }
        return false;
    }
};


Problem - Product of array except itself
problem link -  https://neetcode.io/problems/products-of-array-discluding-self
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        int beforeprod = 1;
        vector<int>ans(n); 
        for(int i=0;i<n;i++){
            ans[i] = beforeprod;
            beforeprod = beforeprod*nums[i];
        }
        int afterprod = 1;
        for(int i=n-1;i>-1;i--){
            ans[i] *=afterprod;
            afterprod *= nums[i]; 
        }
        return ans;
    }
};


Problem - Valid sudoku
problem link - https://neetcode.io/problems/valid-sudoku
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    continue;
                }
                else{ 
                    for(int k=0;k<9;k++){
                        if((board[i][k]==board[i][j])&&(k!=j)){
                            return false;
                        } 
                        if((board[k][j]==board[i][j])&& i!=k){
                            return false;
                        } 
                    }
                    for(int k=0;k<3;k++){
                        int rowindex = 3*(i/3) +k;
                        for(int l=0;l<3;l++){
                            int columnindex = 3*(j/3)+l;
                            if(board[rowindex][columnindex]==board[i][j] && (rowindex!=i ||columnindex!=j)){
                                return false; 
                            }
                        } 
                    }
                }
            }
        }
        return true;
    }
};


Problem - Longest Consecutive sequence
problem link - https://neetcode.io/problems/longest-consecutive-sequence
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0){
            return 0;
        }
        set<int>s(nums.begin(),nums.end());
        int n = s.size(); 
        vector<int>unique(n);
        int i=0;
        for(auto it = s.begin();it!=s.end();it++){
            unique[i]=*it;
            i++;
        }
        int maxlen = 1; 
        int temp = 1; 
        for(int j=0;j<n-1;j++){
            if(unique[j]+1==unique[j+1]){
                temp++; 
            } 
            else{
                if(temp>maxlen){
                    maxlen = temp;
                } 
                temp = 1; 
            }
        } 
        if(temp>maxlen){
            maxlen = temp;
        }
        return maxlen; 
    } 
};
